{"componentChunkName":"component---src-pages-posts-js","path":"/first","webpackCompilationHash":"b6f7f96044d1fff6c2c9","result":{"data":{"markdownRemark":{"id":"40323362-356f-563a-ad38-c1e678ce424f","html":"<h3>Goal:</h3>\n<p>Our goal is to create a blog using the gatsby static site generator. The data for the blog is going to be fetched from markdown files created inside a folder in the project. The data is going to be fetched using graphQL and passed into a component which will render the data.</p>\n<h3>Create the project</h3>\n<p>After installing the gatsby-cli we will use it to create a gatsby project boilerplate.</p>\n<pre><code>yarn global add gatsby-cli\ngatsby new myblog\n</code></pre>\n<p>To run the project in development mode use the command below and access the page 127.0.0.1:8000.</p>\n<pre><code>gatsby develop\n</code></pre>\n<h3>Plugins:</h3>\n<ol>\n<li>We will need to install a plugin from the gatsby source to access the file system </li>\n</ol>\n<pre><code>yarn add gatsby-source-filesystem\n</code></pre>\n<p>And we will add the installed plugin to the <code>gatsby-config.js</code> file.</p>\n<pre><code>{\n    resolve:'gatsby-source-filesystem',\n    options:{\n        path:`${__dirname}/src/markdown`,\n        name:'pages'\n    }\n}\n</code></pre>\n<ol start=\"2\">\n<li>We need a transformer plugin which will make our files queryable from graphql. </li>\n</ol>\n<pre><code>yarn add gatsby-transformer-remark\n</code></pre>\n<p>and import the plugin to the <code>gatsby-config.js</code> file.</p>\n<ol start=\"3\">\n<li>Add the folder we configured in step 1 where all the markdown files will exist and create the first <em>markdown</em> file <code>first.md</code></li>\n</ol>\n<p>At the top of this file we can add properties which will not be a part of the markdown content but actually accessible from javascript by adding them between three dashes and after that add the markdown so the file will look something like:</p>\n<pre><code class=\"language-md\">---\ntitle: First Post Post\npath: /first\n---\n\n## Hello World!\nThis is a test sentence.\n</code></pre>\n<ol start=\"4\">\n<li>\n<p>We can now create a javascript file that will receive the markdown files as data through a query, then render these markdowns.</p>\n<ul>\n<li>Create React Component</li>\n<li>Create Query that will get the content of every post</li>\n</ul>\n</li>\n</ol>\n<h3>Create a React Component</h3>\n<p>Basically we need to create a react component that will receive the data from the query and show it somehow. The data will be available in the props of the component.</p>\n<pre><code>class Posts extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      html: '&#x3C;div> Loading &#x3C;/div>'\n    };\n  }\n\n  componentDidMount() {\n    const { html } = this.props.data.markdownRemark;\n    this.setState({html:html});\n  }\n\n  render() {\n\n    return (\n      &#x3C;>\n        &#x3C;div dangerouslySetInnerHTML={{ __html: this.state.html }}>&#x3C;/div>\n      &#x3C;/>\n    )\n  }\n}\n\n\nexport default Posts\n</code></pre>\n<h3>Create a graphQL query</h3>\n<p>The query to fetch the content will look something like below.\nWe create a query and give it any name and as an argument define the type of variable it will be based on, which is the path defined inside each md file. In the rest of the query we tell it that the <code>frontmatter.path</code> should be equal to the passed in variable.\nSo for instance if we are passing in <em>first</em> as an argument to the query we will only get the md file where its path is <em>first</em> in the frontmatter.</p>\n<pre><code>export const query = graphql`\n    query postByName($path: String!) {\n        markdownRemark( frontmatter: { path: { eq: $path}} ) \n        {\n            id\n            html\n            frontmatter {\n                title\n                path\n            }\n        }\n    }\n`;\n</code></pre>\n<ol>\n<li>We need to tell gatsby how to treat the files in the markdown folder and access them.\nEdit config file in the root folder with the name <code>gatsby-node.js</code>.\nWe will use create pages function from the gatsby api to create pages.</li>\n</ol>\n<h3>Deploy to github</h3>\n<p>We will create a script that will automatically build and deploy our blog to github pages.\nThe easiest way to deploy to github is using a package named <code>ghpages</code> on github.</p>\n<pre><code>yarn add gh-pages --dev\n</code></pre>\n<p>Create a scripts folder and inside the scripts folder create a file <code>deploy-github.js</code> and simply add the following:</p>\n<p>the <code>'public'</code> tells ghpages which folder to upload and the <code>repo</code> is the repository address.</p>\n<pre><code>const ghpages = require('gh-pages')\n\nghpages.publish(\n  'public',\n \n  {\n    branch: 'master',\n      repo: 'https://github.com/pharzan/pharzan.github.io',\n  },\n  (msg) => {\n    console.log('Message::',msg)\n  }\n)\n</code></pre>\n<p>Now inside <code>package.json</code> we can add a shortcut to build then deploy by executing the above script.</p>\n<pre><code>\"deploy:github\": \"npm run build &#x26;&#x26; node ./scripts/deploy-github\"\n</code></pre>\n<p>If you are pointing a custom domain to the github pages you can add a <code>CNAME</code> file and inside have the domain name set.\nAfter that push to github.</p>","frontmatter":{"title":"How to create a Gatsby GraphQL Blog and deploy it to GitHub","path":"/first"}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}}